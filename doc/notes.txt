=========================================
= main.c                                =
=========================================
int main(){
	while(running){
		update();
		render();
		pause();
	}
}

in pause - napms(n) - from curses, sleep n ms.

* These two line make it so that getch() doesn't need to wait 
* for a character to be entered for getch() to return.
* This allows the game to update and render even when there is no input
* Also put as: call getch() without blocking
cbreak(); // put terminal in c break mode
nodelay(w, TRUE); // don't wait for enter to read char
getch() will return ERR if no key has been pressed

noecho(); // turn off key echoing
keypad(w, TRUE); // allow getch() to detect non-character key presses

refresh() - redraws screen with any updates
to increase performance, curses draws to an offscreen buffer
then updates the screen all at once when refresh is called

addstr() - prints specified string
printw() - prints specified string WITH formatting (printf)

int mvaddstr(int y, int x, const char *str);
mvprintw(int Line, int Column, char *Format, [Argument ...]);

charachter range is gonna have to be between 33 and 126
windows has extended ascii character set (codepage 437),
but linux is limited to utf-8
=========================================
= mainMenu.h                            =
=========================================
#stateID = 1
	-recursive findMax() // might not be necessary

=========================================
= update.h                              =
=========================================


=========================================
= state.h                              =
=========================================
StateID's:
	0   quit
	1   mainMenu
	2   game
	3   instructions
	4   options
	5   battle
	6   shop
	7   inventory
	8   nameing?

=========================================
= mapFileParser.h                       =
=========================================

=========================================
= Map File definition                   =
=========================================
Let's define a file standard, shall we?

d (newline)
[description string] (newline)
t (newline)
[comma seperated list ofintigers, 160 numbers long] (newline)
[another comma seperated list of intergers] (newline)
[do that another 158 times] (newline)
[to form a 160 X 160 array, holding the tile id's] (newline)
c (newline)
[comma seperated list of 160 X 160 intergers] (newline)
[this one hold color data] (newline)
[in a 1 to 1 mapping of the array above] (newline)
p (newline)
[another 160 X 160] (newline)
[this one holds tile properties] (newline)
(end of file)

=========================================
= Warp File definiton                   =
=========================================
First line is the number of warps contained in the file, then a newline
character is read. 
On the next line is the default starting point for Chad when a savefile is not
loaded. It is comprised of the warp ID (allways 900 for the starting point),
then a space, then the map number, then a space, then the x coordinate, space,
y coordinate, space, direction (0-3). The following lines contain the rest of
the map warps, which follow the same format, and start counting up by 1 with
the warp ID of 901. The fact that the  900 is the first entry signifies that
it is the starting point. The starting point should always come first. The
order of the rest does not matter, as the data will be read from the map, but
it needs to count up from 901 by one's. What I mean is, the Warp Id's must be
in order, but where the warps are doesn't have to be the order in which the
player inevitably accesses them. 

=========================================
= Savefile definition                   =
=========================================
experience\n
hp\n
map#\n
x\n
y\n
direction\n
(more to come)

=========================================
= Game.h                                =
=========================================
(NOT USED ANYMORE) GameState Id's:
	0 Walking
	1 Dialogue
	2 battle
	3 event
	4 pauseMenu
	5 shop
int facing
	0 - [U]p
	1 - [D]own
	2 - [L]eft
	3 - [R]ight

==========================================
= Problems That Arose                    =
==========================================

1. When I was first thinking about this project, I was gonna try to use OpenGl
to make a game. As it turns out, it's hella difficult (yo) to get OpenGL
working in genenral, let alone on windows, unix and mac all at the same time.
Simply put, it was too much for me to worry about learning OpenGL and making a
game at the same time. So I switched over to curses.

2. Curses is a library that lets you do cool things with the terminal, like
format stuff nicely, and use colors. The current implementations of the curses
library are pdCurses for windows, and ncurses for linux. It was super easy to
get ncurses set up, but pdcurses took a little bit more work. It wasn't all
that difficult to be honest, it was just less straightforward.

3. ScreenSize - This game runs in a 80 X 25 character termial. On windows,
this is not an issue, the defalt termial size is 80 X 25, and you can't really
change that. On linux, however, the user can resize the terminal to their
heart's content. I tried to use several functions from the curses library to
automatically resize the window, but everything I tried caused an immediate
crash, on both Linux and Windows. As a solution, I included a screen test in
the options menu, where a box is drawn on very edges of the screen. This
allows linux users to manually rezise their termial until the entire box fits.
This isn't a perfect solution, but it works.

3. Colors and characters- I'm trying to make a game that works on both Windows
and Linux (and maybe one day, Mac), which means that it should be able to
easily complile and run on both those platforms without having to really
change the source code. Remember those colors I mentioned earlier? It turns
out different systems support more colors than others. Specificially, Windows
supports more colors on the terminal than Linux, so I had to figure out the
maximum number of colors I could get on both termials, which ended u being 8
different colors in 64 different combinations of backround and foreground
color. Also, linux and windows both support two different extended character
sets. Ncurses implements one, and pdcurses implements another. The two are
not compatible, so I had to limit the characters used to the standard ASCII
character set.

4. Memory leaks. I had a few. One was a segmentation fault that caused my
program to crash every time it exited. Which wasn't terrible, because it
finished by the time it crashed. It wasn't good either, though. So, I
downloaded valgrind, and started looking at my program's memeory usage. I had
a feeling it had something to do with my maps, for which there was a rather
large memory allocation. As it turns out, i was trying to de-allocate a
pointer twice, which caused the error. I also found a case where I had a
pointer to a pointer, and I was allocating memory on both levels of pointers.
I figured you could just free the pointer to the pointer, and it would take
care of them all, but you have to free the sub-pointers as well, or memory is
leaked.
