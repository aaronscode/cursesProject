=========================================
= main.c                                =
=========================================
int main(){
	while(running){
		update();
		render();
		pause();
	}
}

in pause - napms(n) - from curses, sleep n ms.

* These two line make it so that getch() doesn't need to wait 
* for a character to be entered for getch() to return.
* This allows the game to update and render even when there is no input
* Also put as: call getch() without blocking
cbreak(); // put terminal in c break mode
nodelay(w, TRUE); // don't wait for enter to read char
getch() will return ERR if no key has been pressed

noecho(); // turn off key echoing
keypad(w, TRUE); // allow getch() to detect non-character key presses

refresh() - redraws screen with any updates
to increase performance, curses draws to an offscreen buffer
then updates the screen all at once when refresh is called

addstr() - prints specified string
printw() - prints specified string WITH formatting (printf)

int mvaddstr(int y, int x, const char *str);
mvprintw(int Line, int Column, char *Format, [Argument ...]);

charachter range is gonna have to be between 33 and 126
windows has extended ascii character set (codepage 437),
but linux is limited to utf-8
=========================================
= mainMenu.h                            =
=========================================
#stateID = 1
	-recursive findMax() // might not be necessary

=========================================
= update.h                              =
=========================================


=========================================
= state.h                              =
=========================================
StateID's:
	0   quit
	1   mainMenu
	2   game
	3   instructions
	4   options
	5   battle
	6   shop
	7   inventory
	8   nameing?

=========================================
= mapFileParser.h                       =
=========================================

=========================================
= Map File definition                   =
=========================================
Let's define a file standard, shall we?

d (newline)
[description string] (newline)
t (newline)
[comma seperated list ofintigers, 160 numbers long] (newline)
[another comma seperated list of intergers] (newline)
[do that another 158 times] (newline)
[to form a 160 X 160 array, holding the tile id's] (newline)
c (newline)
[comma seperated list of 160 X 160 intergers] (newline)
[this one hold color data] (newline)
[in a 1 to 1 mapping of the array above] (newline)
p (newline)
[another 160 X 160] (newline)
[this one holds tile properties] (newline)
(end of file)
